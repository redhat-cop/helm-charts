apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy
  namespace: {{ .Values.application.environments.cicd }}
spec:
  params:
    - name: cluster
      description: cluster app url
      type: string
    - name: ref
      description: git ref
      type: string
    - name: revision
      description: git unique head commit id
      type: string
    - name: revision-short
      description: git unique head commit id short version
      type: string
    - name: revision-type
      description: revision type usually branch type
      type: string
    - name: revision-name
      description: revision name usually version or branch name
      type: string
  steps:
    - name: app-create
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc9cd600ac77eb75457bcf5dd4282235c16f8461cad4d253bb95151883026702
      script: |
        #!/bin/sh
        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then
          replace=$(inputs.params.revision-name)
          revisionName=${replace//./-}
          appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName

          if [ "$(inputs.params.revision-type)" == "develop" ]; then
            # overwrite develop name structure
            appname={{ .Values.application.name }}-$revisionName
          fi

          oc get deployment/$appname -n {{ .Values.application.environments.development }}
          if [[ $? -ne 0 ]]; then
            oc new-app --name=$appname -i={{ .Values.application.name }}-development:$(inputs.params.revision-name) --namespace={{ .Values.application.environments.development }} --labels=app.name={{ .Values.application.name }}
          else
            echo "Application already exists."
          fi

        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi

    - name: app-docs
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc9cd600ac77eb75457bcf5dd4282235c16f8461cad4d253bb95151883026702
      script: |
        #!/bin/sh
        if [ "$(inputs.params.revision-type)" == "develop" ]; then
          replace=$(inputs.params.revision-name)
          revisionName=${replace//./-}
          appname={{ .Values.application.name }}-documentation

          oc get deployment/$appname -n {{ .Values.application.environments.development }}
          if [[ $? -ne 0 ]]; then
            oc new-app --name=$appname -i={{ .Values.application.name }}-documentation:$(inputs.params.revision-name) --namespace={{ .Values.application.environments.development }} --labels=app.name={{ .Values.application.name }}
          else
            echo "Application already exists."
          fi

        else
          echo "Skipping. Only develop deploys documentation"
          exit 0
        fi

    - name: app-expose
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc9cd600ac77eb75457bcf5dd4282235c16f8461cad4d253bb95151883026702
      script: |
        #!/bin/sh
        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then
          replace=$(inputs.params.revision-name)
          revisionName=${replace//./-}
          appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName
          hostname=$(inputs.params.revision-type)-$revisionName-{{ .Values.application.environments.development }}.{{ .Values.cluster }}

          if [ "$(inputs.params.revision-type)" == "develop" ]; then
            # overwrite appname structure
            appname={{ .Values.application.name }}-$revisionName
            # overwrite hostname
            hostname=$revisionName-{{ .Values.application.environments.development }}.{{ .Values.cluster }}

            # documentation development route
            documentation={{ .Values.application.name }}-documentation-{{ .Values.application.environments.development }}.{{ .Values.cluster }}
            oc get route/{{ .Values.application.name }}-documentation -n {{ .Values.application.environments.development }}
            if [[ $? -ne 0 ]]; then
              echo "Exposing"
              oc create route edge --service {{ .Values.application.name }}-documentation --port 8080 --hostname $documentation -n {{ .Values.application.environments.development }}
            else
              echo "Documentation is already exposed."
              echo $documentation
              echo ""
            fi


          fi

          oc get svc/$appname -n {{ .Values.application.environments.development }}
          if [[ $? -ne 0 ]]; then
            echo "Exposing"
            oc expose svc/$appname -n {{ .Values.application.environments.development }}
          else
            echo "Application is already exposed."
            echo $hostname
            echo ""
          fi

          oc get route/$appname -n {{ .Values.application.environments.development }}
          if [[ $? -ne 0 ]]; then
            echo "Creating routes"
            oc create route edge --service $appname --port 8080 --hostname $hostname -n {{ .Values.application.environments.development }}
            sleep 5
            oc patch svc/$appname -p '{ "spec": {"type":"LoadBalancer"}}, { "ports": [ { "name": "gw", "protocol": "TCP", "port": 8080,"targetPort": 8080 } ] } }' -n {{ .Values.application.environments.development }}
          else
            echo ""
            echo "Route is already available."
            echo $hostname
          fi

        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi

    - name: app-labels
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc9cd600ac77eb75457bcf5dd4282235c16f8461cad4d253bb95151883026702
      script: |
        #!/bin/sh
        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then

          replace=$(inputs.params.revision-name)
          revisionName=${replace//./-} # replace . to /
          appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName

          if [ "$(inputs.params.revision-type)" == "develop" ]; then
            # overwrite appname structure
            appname={{ .Values.application.name }}-$revisionName
          fi


        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi

    - name: app-envs
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc9cd600ac77eb75457bcf5dd4282235c16f8461cad4d253bb95151883026702
      script: |
        #!/bin/sh
        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}
        appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName
        environment={{ .Values.application.environments.development }}

        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then

          if [ "$(inputs.params.revision-type)" == "develop" ]; then
            # overwrite appname structure
            appname={{ .Values.application.name }}-$revisionName
            oc set env deployment/$appname --overwrite version=$(inputs.params.revision-short) -n $environment
          else
            oc set env deployment/$appname --overwrite revision-id=$(inputs.params.revision-short) -n $environment
            oc set env deployment/$appname --overwrite revision-name=$revisionName -n $environment
          fi

          oc set env deployment/$appname --overwrite environment=development -n $environment
          oc set env deployment/$appname --overwrite revision-type=$(inputs.params.revision-type) -n $environment
          oc set env deployment/$appname --list -n $environment

        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi

    - name: app-probes
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc9cd600ac77eb75457bcf5dd4282235c16f8461cad4d253bb95151883026702
      script: |
        #!/bin/sh
        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then

          replace=$(inputs.params.revision-name)
          revisionName=${replace//./-}
          appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName

          if [ "$(inputs.params.revision-type)" == "develop" ]; then
            # overwrite appname structure
            appname={{ .Values.application.name }}-$revisionName
          fi

          oc set probe deployment/$appname --remove --readiness --liveness -n {{ .Values.application.environments.development }}
          oc set probe deployment/$appname --readiness --get-url=http://:8080/ --initial-delay-seconds=30 -n {{ .Values.application.environments.development }}

        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi

    - name: app-autoscale
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc9cd600ac77eb75457bcf5dd4282235c16f8461cad4d253bb95151883026702
      script: |
        #!/bin/sh

        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}

        if [ "$(inputs.params.revision-type)" == "develop" ]; then
          appname={{ .Values.application.name }}-$(inputs.params.revision-type)
          min=1
          max=10
          threshold=50
        elif [ "$(inputs.params.revision-type)" == "feature" ]; then
          appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName
          min=1
          max=2
          threshold=75
        fi

        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then

          oc get hpa $appname -n {{ .Values.application.environments.development }}
          if [[ $? -ne 0 ]]; then
            oc autoscale deployment $appname \
              --min $min --max $max --cpu-percent=$threshold \
              --namespace {{ .Values.application.environments.development }}
          else
            echo "Application autoscale is already configured."
          fi
        fi

    - name: app-triggers
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc9cd600ac77eb75457bcf5dd4282235c16f8461cad4d253bb95151883026702
      script: |
        #!/bin/sh
        if [ "$(inputs.params.revision-type)" == "feature" ] || [ "$(inputs.params.revision-type)" == "develop" ]; then

          replace=$(inputs.params.revision-name)
          revisionName=${replace//./-}
          appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName

          if [ "$(inputs.params.revision-type)" == "develop" ]; then
            # overwrite appname structure
            appname={{ .Values.application.name }}-$revisionName
          fi

          oc set triggers deployment/$appname -n {{ .Values.application.environments.development }}

        else
          echo "Branch type $(inputs.params.revision-type) does not deploy to development"
          exit 0
        fi
