apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: promote
  namespace: {{ .Values.application.environments.cicd }}
spec:
  workspaces:
  - name: source
  - name: shared
  params:
    - name: cluster
      description: cluster app url
      type: string
    - name: ref
      description: git ref
      type: string
    - name: repofullname
      type: string
    - name: revision
      description: git unique head commit id
      type: string
    - name: revision-short
      description: git unique head commit id short version
      type: string
    - name: revision-type
      description: revision type usually branch type
      type: string
    - name: revision-name
      description: revision name usually version or branch name
      type: string
    - name: author
      type: string
    - name: email
      type: string

  steps:
    # todo: use when expressions when available
    - name: validate
      image: registry.redhat.io/rhel8/nodejs-12@sha256:3c7f0b36e4313819009df28c4b666320e0cff45041ccbc3861327054f9e1d1f6
      resources: {}
      script: |
        #!/bin/sh
        revisionType=$(params.revision-type)
        if [ "$revisionType" == "release" ] || [ "$revisionType" = "hotfix" ] || [ "$revisionType" = "patch" ]; then
          echo OK
          exit 0
        else
          echo "Preventing $revisionType to be promoted to a production environment"
          exit 1
        fi

    # todo: use tekton auth secrets
    - name: release-notes
      image: registry.redhat.io/rhel8/nodejs-12@sha256:3c7f0b36e4313819009df28c4b666320e0cff45041ccbc3861327054f9e1d1f6
      workingDir: /workspace/source/{{ .Values.pipeline.build.s2i.context }}
      script: |
        #!/bin/sh

        ls -ls

        before=$(cat package.json \
        | grep version \
        | head -1 \
        | awk -F: '{ print $2 }' \
        | sed 's/[",]//g')
        before=$(echo -e $before)

        git config --global user.name "$(params.author)"
        git config --global user.email "$(params.email)"

        git fetch --all --tags > /dev/null 2>&1
        git checkout -b $(params.revision-type)/$(params.revision-name) > /dev/null 2>&1
        git log master..$(params.revision-type)/$(params.revision-name) --oneline --no-merges --decorate > release-v$(params.revision-name).md > /dev/null 2>&1

        # hack for first version to be upgraded as major
        if [ "$before" == "0.0.0" ]; then
          npm version major > /dev/null 2>&1
        else
          npm version minor > /dev/null 2>&1
        fi

        git add release-v$(params.revision-name).md
        git add package.json
        git commit -m "Including release notes"
        git tag -a $(params.revision-name) -m "Upgrade to v$(params.revision-name)"
        git push origin $(params.revision-type)/$(params.revision-name) --tags
      securityContext:
        runAsUser: 0

    - name: release-image
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc35a9fc663baf0d6493cc57e89e77a240a36c43cf38fb78d8e61d3b87cf5cc5
      script: |
        #!/bin/sh
        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}
        appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName
        oc tag {{ .Values.application.environments.development }}/{{ .Values.application.name }}-development:$(inputs.params.revision-name) {{ .Values.application.environments.production }}/{{ .Values.application.name }}-production:$(inputs.params.revision-name)
        oc tag {{ .Values.application.environments.production }}/{{ .Values.application.name }}-production:$(inputs.params.revision-name) {{ .Values.application.environments.production }}/{{ .Values.application.name }}-production:$(inputs.params.revision-name)
        oc get deployment/$appname -n {{ .Values.application.environments.production }}
        if [[ $? -ne 0 ]]
        then
            oc new-app --name=$appname -i={{ .Values.application.name }}-production:$(inputs.params.revision-name) --namespace={{ .Values.application.environments.production }} --labels=app.name={{ .Values.application.name }}
        else
            echo "Application already exists."
        fi

    - name: app-expose
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc35a9fc663baf0d6493cc57e89e77a240a36c43cf38fb78d8e61d3b87cf5cc5
      script: |
        #!/bin/sh
        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}
        hostname=v$revisionName-{{ .Values.application.environments.production }}.{{ .Values.cluster }}
        appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName

        sleep 10
        oc get svc/$appname -n {{ .Values.application.environments.production }}
        if [[ $? -ne 0 ]]; then
          echo "Exposing"
          oc expose svc/$appname -n {{ .Values.application.environments.production }}
        else
          echo "Application is already exposed."
          echo $hostname
        fi

        sleep 10

        oc get route/$appname -n {{ .Values.application.environments.production }}
        if [[ $? -ne 0 ]]; then
          echo "Creating routes"
          oc create route edge --service $appname --port 8080 --hostname $hostname -n {{ .Values.application.environments.production }}
          sleep 5
          oc patch svc/$appname -p '{ "spec": {"type":"LoadBalancer"}}, { "ports": [ { "name": "gw", "protocol": "TCP", "port": 8080,"targetPort": 8080 } ] } }' -n {{ .Values.application.environments.production }}
          # oc expose svc/nodejs-tekton-release-1-2-0 -n nodejs-tekton-production
        else
          echo "Route is already available."
          echo $hostname
        fi

    - name: app-labels
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc35a9fc663baf0d6493cc57e89e77a240a36c43cf38fb78d8e61d3b87cf5cc5
      script: |
        #!/bin/sh
        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}
        appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName
        environment={{ .Values.application.environments.production }}
        oc label deployment/$appname --overwrite app.kubernetes.io/name=$appname -n $environment
        oc label deployment/$appname --overwrite app.version=$revisionName -n $environment
        oc label deployment/$appname --overwrite app.revision-id=$(inputs.params.revision-short) -n $environment
        oc label deployment/$appname --overwrite app.revision-type=$(inputs.params.revision-type) -n $environment
        oc label deployment/$appname --overwrite app.revision-name=$revisionName -n $environment
        oc label deployment/$appname --overwrite app.revision-author=$(inputs.params.author) -n $environment

    - name: app-envs
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc35a9fc663baf0d6493cc57e89e77a240a36c43cf38fb78d8e61d3b87cf5cc5
      script: |
        #!/bin/sh
        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}
        appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName
        environment={{ .Values.application.environments.production }}
        oc set env deployment/$appname --list -n $environment
        oc set env deployment/$appname --overwrite environment=production -n $environment
        oc set env deployment/$appname --overwrite version=$(inputs.params.revision-name) -n $environment
        oc set env deployment/$appname --overwrite revision-id=$(inputs.params.revision-short) -n $environment
        oc set env deployment/$appname --overwrite revision-name=$revisionName -n $environment
        oc set env deployment/$appname --overwrite revision-type=$(inputs.params.revision-type) -n $environment

    - name: app-secrets
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc35a9fc663baf0d6493cc57e89e77a240a36c43cf38fb78d8e61d3b87cf5cc5
      command: ["/bin/bash", "-c"]
      args:
        - |-
          replace=$(inputs.params.revision-name)
          revisionName=${replace//./-}
          appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName
          # example
          # oc set env deployment/$appname --from secret/input -n {{ .Values.application.environments.production }}

    - name: app-probes
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc35a9fc663baf0d6493cc57e89e77a240a36c43cf38fb78d8e61d3b87cf5cc5
      command: ["/bin/bash", "-c"]
      args:
        - |-
          replace=$(inputs.params.revision-name)
          revisionName=${replace//./-}
          appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName
          oc set probe deployment/$appname --remove --readiness --liveness -n {{ .Values.application.environments.production }}
          oc set probe deployment/$appname --readiness --get-url=http://:8080/ --initial-delay-seconds=30 -n {{ .Values.application.environments.production }}

    - name: app-autoscale
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc35a9fc663baf0d6493cc57e89e77a240a36c43cf38fb78d8e61d3b87cf5cc5
      script: |
        #!/bin/sh

        replace=$(inputs.params.revision-name)
        revisionName=${replace//./-}

        if [ "$(inputs.params.revision-type)" == "release" ] || [ "$(inputs.params.revision-type)" == "hotfix" ] || [ "$(inputs.params.revision-type)" == "patch" ]; then
          appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName
          min=1
          max=10
          threshold=50

          oc get hpa $appname -n {{ .Values.application.environments.production }} --ignore-not-found
          if [[ $? -ne 0 ]]; then
            oc autoscale deployment $appname \
              --min $min --max $max --cpu-percent=$threshold \
              --namespace {{ .Values.application.environments.production }}
          else
            echo "Application autoscale is already configured."
          fi
        fi

    - name: app-triggers
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc35a9fc663baf0d6493cc57e89e77a240a36c43cf38fb78d8e61d3b87cf5cc5
      command: ["/bin/bash", "-c"]
      args:
        - |-
          replace=$(inputs.params.revision-name)
          revisionName=${replace//./-}
          appname={{ .Values.application.name }}-$(inputs.params.revision-type)-$revisionName
          oc set triggers deployment/$appname -n {{ .Values.application.environments.production }}

    - name: report
      image: registry.redhat.io/ubi8/ubi:latest@sha256:244e9858f9d8a2792a3dceb850b4fa8fdbd67babebfde42587bfa919d5d1ecef
      env:
        - name: GITHUBTOKEN
          valueFrom:
            secretKeyRef:
              name: {{ .Values.pipeline.webhook.github.secret }}
              key: password
      script: |
        #!/usr/libexec/platform-python
        import json
        import os
        import http.client
        status_url = """/repos/$(params.repofullname)/statuses/$(params.revision)"""

        data = {
            "state": "success",
            "target_url": "https://replaceme",
            "description": "Building",
            "context": "tekton"
        }
        conn = http.client.HTTPSConnection("api.github.com")
        r = conn.request(
            "POST",
            status_url.rstrip("\n"),
            body=json.dumps(data),
            headers={
                "User-Agent": "TektonCD, the peaceful cat",
                "Authorization": "Bearer " + os.environ["GITHUBTOKEN"],
            })
        resp = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
            # sys.exit(resp.read())
        else:
          print("GitHub status 'success' has been set")
