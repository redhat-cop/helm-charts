apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: status
  namespace: {{ .Values.application.environments.cicd }}
spec:
  params:
    - name: ref
      type: string
    - name: revision
      type: string
    - name: repourl
      type: string
    - name: repofullname
      type: string
    - name: author
      type: string
    - name: message
      type: string
  workspaces:
  - name: source
  description: The git repo will be cloned onto the volume backing this workspace
  results:
    - name: cluster
      description: apps cluster url
    - name: ref
      description: reference
    - name: revision
      description: unique id from git head commit
    - name: revision-short
      description: unique id from git head commit short version
    - name: revision-type
      description: Contains the type of branch - feature, release,...
    - name: revision-name
      description: Contains the name of the branch without the type, ie. omitting the first slash
    - name: full-revision-name
      description: Contains the name of the branch without the type, ie. omitting the first slash
    - name: repourl
      description: repository url from github payload
    - name: repofullname
      description: full name user-org/reponame from github
    - name: message
      description: Contains the commit message
    - name: author
      description: Contains the author username
  steps:
    - name: variables
      image: registry.redhat.io/openshift4/ose-cli:latest@sha256:bc9cd600ac77eb75457bcf5dd4282235c16f8461cad4d253bb95151883026702
      resources: {}
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        echo $(oc config view)
        server=$(echo $(oc config view --minify -o jsonpath='{.clusters[*].cluster.server}'))
        cluster=$(echo "apps."${server//https:\/\/api./})
        cluster=${cluster//:6443/}
        echo $cluster

        echo $(params.ref)
        echo $(params.revision)
        echo $(params.author)
        echo $(params.message)
        echo $(params.ref) > /tekton/results/ref
        echo $(params.revision) | sed 's/ *$//g' > /tekton/results/revision
        echo $(params.author) > /tekton/results/author
        echo $(params.message) > /tekton/results/message
        echo $(params.repourl) > /tekton/results/repourl
        echo $(params.repofullname) > /tekton/results/repofullname
        echo $cluster > /tekton/results/cluster
        echo $(params.ref) | awk -F "/" '{if (NF > 1) {printf "%s", $3 > "/tekton/results/revision-type"; printf "%s", $4 > "/tekton/results/revision-name"; printf "%s/%s", $3, $4 > "/tekton/results/full-revision-name"} else {printf "%s", "unknown" > "/tekton/results/revision-type"; printf "%s", $3 > "/tekton/results/revision-name"; printf "%s", $4 > "/tekton/results/full-revision-name"}}'
        if [ "$(cat /tekton/results/revision-type)" == "develop" ]; then
          printf %s "develop" >> /tekton/results/revision-name
        fi
        echo "Revision-type:" $(cat /tekton/results/revision-type)
        echo "Revision-name:" $(cat /tekton/results/revision-name)

    - name: validate
      image: registry.redhat.io/rhel8/nodejs-12@sha256:3c7f0b36e4313819009df28c4b666320e0cff45041ccbc3861327054f9e1d1f6
      resources: {}
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh
        ref=$(cat /tekton/results/ref)
        revisionType=$(cat /tekton/results/revision-type)
        revisionName=$(cat /tekton/results/revision-name)
        # echo $(git rev-parse --short HEAD) > /tekton/results/revision-short
        printf %s "$(git rev-parse --short HEAD)" >> /tekton/results/revision-short
        package={{ .Values.pipeline.build.s2i.context }}/package.json
        git fetch --all --tags > /dev/null 2>&1
        if git rev-parse -q --verify "refs/tags/$revisionName" >/dev/null; then
            echo "Tag $revisionName already exists"
            exit 1
        fi

        if [ ! -f $package ]; then
            echo "Missing package.json"
            exit 1
        fi

        # verify if it's not a tag webhook event
        if [[ $ref == *"refs/tags/"* ]]; then
          echo "This is a tag commit. Not building."
          exit 1
        fi

        if [ "$revisionType" == "release" ] || [ "$revisionType" = "hotfix" ] || [ "$revisionType" = "patch" ] || [ "$revisionType" == "feature" ] || [ "$revisionType" = "develop" ]; then
          exit 0
        else
          echo "Branch $revisionType is not supported as part of git flow implementation"
          exit 1
        fi

        echo OK

    # - name: debug
    #   image: registry.redhat.io/rhel8/nodejs-12
    #   workingDir: /workspace/source/{{ .Values.pipeline.build.s2i.context }}
    #   command: ["/bin/bash", "-c"]
    #   args:
    #     - |-
    #       set -ex
    #       find /workspace/source/{{ .Values.pipeline.build.s2i.context }}

    # - name: pause
    #   image: docker
    #   args: ["sleep", "120000"]
