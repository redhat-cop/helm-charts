{{- if .Values.provisioning.enabled }}
{{- $randomString := include "provisioner.randomString" 5 -}}
{{- $minioAlias := "provisioning" }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.name }}-{{ $randomString | lower }}
  namespace: {{ .Values.namespace }}
  annotations:
    argocd.argoproj.io/hook: {{ .Values.argoproj.hook | default "Sync" | quote }}
    argocd.argoproj.io/hook-delete-policy: {{ .Values.argoproj.hook_delete_policy | default "HookSucceeded" | quote }}
    argocd.argoproj.io/sync-wave: {{ .Values.syncwave | default 5 | quote }}
  labels:
    {{- include "tpl.labels" $ | nindent 4 }}
spec:
  {{- if .Values.provisioning.cleanupAfterFinished.enabled }} 
  ttlSecondsAfterFinished: {{ .Values.provisioning.cleanupAfterFinished.seconds }} 
  {{- end }} 
  parallelism: 1
  template:
    metadata:
    spec:
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- range .Values.image.pullSecrets }}
        - name: {{.}}
        {{- end }}
      {{- end }}
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 0
      serviceAccountName: {{ .Values.serviceAccount.name }}
      initContainers:
        - name: wait-for-available-minio
          image: {{ .Values.image.url }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default "Always" | quote }}
          command:
            - /bin/bash
            - -c
            - |-
              set -e;
              echo "Waiting for Minio";
              wait-for-port \
                --host={{ .Values.miniocluster.url }} \
                --state=inuse \
                --timeout=120 \
                {{ .Values.miniocluster.port | int64 }};
              echo "Minio is available";
          {{- if .Values.provisioning.resources }}
          resources: {{- toYaml .Values.provisioning.resources | nindent 12 }}
          {{- end }}
      containers:
        - name: minio
          image: {{ .Values.image.url }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default "Always" | quote }}
          command:
            - /bin/bash
            - -c
            - >-
              set -e;

              echo "Start Minio provisioning";

              function attachPolicy() {
                local tmp=$(mc admin $1 info {{ $minioAlias }} $2 | sed -n -e 's/^Policy.*: \(.*\)$/\1/p');
                IFS=',' read -r -a CURRENT_POLICIES <<< "$tmp";
                if [[ ! "${CURRENT_POLICIES[*]}" =~ "$3" ]]; then
                  mc admin policy attach {{ $minioAlias }} $3 --$1=$2;
                fi;
              };

              function detachDanglingPolicies() {
                local tmp=$(mc admin $1 info {{ $minioAlias }} $2 | sed -n -e 's/^Policy.*: \(.*\)$/\1/p');
                IFS=',' read -r -a CURRENT_POLICIES <<< "$tmp";
                IFS=',' read -r -a DESIRED_POLICIES <<< "$3";
                for current in "${CURRENT_POLICIES[@]}"; do
                  if [[ ! "${DESIRED_POLICIES[*]}" =~ "${current}" ]]; then
                    mc admin policy detach {{ $minioAlias }} $current --$1=$2;
                  fi;
                done;
              }

              function addUsersFromFile() {
                local username=$(grep -oP '^username=\K.+' $1);
                local password=$(grep -oP '^password=\K.+' $1);
                local disabled=$(grep -oP '^disabled=\K.+' $1);
                local policies_list=$(grep -oP '^policies=\K.+' $1);
                local set_policies=$(grep -oP '^setPolicies=\K.+' $1);

                mc admin user add {{ $minioAlias }} "${username}" "${password}";

                IFS=',' read -r -a POLICIES <<< "${policies_list}";
                for policy in "${POLICIES[@]}"; do
                  attachPolicy user "${username}" "${policy}";
                done;
                if [ "${set_policies}" == "true" ]; then
                  detachDanglingPolicies user "${username}" "${policies_list}";
                fi;

                local user_status="enable";
                if [[ "${disabled}" != "" && "${disabled,,}" == "true" ]]; then
                  user_status="disable";
                fi;

                mc admin user "${user_status}" {{ $minioAlias }} "${username}";
              };

              {{- $minioUrl := printf "$MINIO_SCHEME://%s:%d" (.Values.miniocluster.url) (.Values.miniocluster.port | int) }}
              {{- $minioRootUser := ternary ("$(<$MINIO_ROOT_USER_FILE)") ("$MINIO_ROOT_USER") (.Values.auth.useCredentialsFiles) }}
              {{- $minioRootPassword := ternary ("$(<$MINIO_ROOT_PASSWORD_FILE)") ("$MINIO_ROOT_PASSWORD") (.Values.auth.useCredentialsFiles) }}
              mc alias set {{ $minioAlias }} {{ $minioUrl }} {{ $minioRootUser }} {{ $minioRootPassword }};

              {{- range $config := .Values.provisioning.config }}
              {{- $options := list }}
              {{- range $name, $value := $config.options }}
              {{- $options = (printf "%s=%s" $name $value) | append $options }}
              {{- end }}
              {{- $options := join " " $options }}
              
              mc admin config set {{ $minioAlias }} {{ $config.name }} {{ $options }};
              
              {{- end }}

              {{- range $policy := .Values.provisioning.policies }}
              mc admin policy create {{ $minioAlias }} {{ $policy.name }} /etc/ilm/policy-{{ $policy.name }}.json;
              {{- end }}

              {{- range $user := .Values.provisioning.users }}

              mc admin user add {{ $minioAlias }} {{ $user.username }} "{{ $user.password }}";

              {{- range $policy := $user.policies }}

              attachPolicy user {{ $user.username }} {{ $policy }};

              {{- end }}
              {{- if $user.setPolicies }}

              detachDanglingPolicies user {{ $user.username }} "{{ join "," $user.policies }}";

              {{- end }}
              {{- $userStatus := ternary ("disable") ("enable") (and (not (empty $user.disabled)) $user.disabled) }}

              mc admin user {{ $userStatus }} {{ $minioAlias }} {{ $user.username }};

              {{- end }}
              {{- if gt (len .Values.provisioning.usersExistingSecrets) 0 }}

              while read -d '' configFile; do
                addUsersFromFile "${configFile}";
              done < <(find "/opt/bitnami/minio/users/" -type l -not -name '..data' -print0);
              
              {{- end }}

              {{- range $group := .Values.provisioning.groups }}

              mc admin group add {{ $minioAlias }} {{ $group.name }} {{ join " " $group.members }};

              {{- range $policy := $group.policies }}

              attachPolicy group {{ $group.name }} {{ $policy }};

              {{- end }}
              {{- if $group.setPolicies }}

              detachDanglingPolicies group {{ $group.name }} "{{ join "," $group.policies }}";

              {{- end }}
              {{- $groupStatus := ternary ("disable") ("enable") (and (not (empty $group.disabled)) $group.disabled) }}

              mc admin group {{ $groupStatus }} {{ $minioAlias }} {{ $group.name }};

              {{- end }}

              {{- range $bucket := .Values.provisioning.buckets }}
              {{- $target := printf "%s/%s" $minioAlias $bucket.name }}
              {{- $region := ternary (printf "--region=%s" $bucket.region) ("") (not (empty $bucket.region)) }}
              {{- $withLock := ternary ("--with-lock") ("") (and (not (empty $bucket.withLock)) $bucket.withLock) }}
              
              mc mb {{ $target }} --ignore-existing {{ $region }} {{ $withLock }};

              {{- if $bucket.lifecycle }}
              
              mc ilm import {{ $minioAlias }}/{{ $bucket.name }} < /etc/ilm/bucket-{{ $bucket.name }}.json;
              
              {{- end }}

              {{- with $bucket.quota }}
              {{- if eq .type "hard" }}
              
              mc quota set {{ $minioAlias }}/{{ $bucket.name }} {{ if .size }}--size {{ .size }}{{ end }};
              
              {{- else }}
              
              mc quota {{ .type }} {{ $minioAlias }}/{{ $bucket.name }} {{ if .size }}--size {{ .size }}{{ end }};
              
              {{- end }}
              {{- end }}

              {{- if (or ((empty $bucket.withLock)) (not $bucket.withLock)) }}
              {{- $versioning := default "Suspended" $bucket.versioning }}
              {{- if kindIs "bool" $bucket.versioning }}
              {{- $versioning = ternary "Versioned" "Suspended" $bucket.versioning }}
              {{- end }}
              {{- if eq $versioning "Versioned" }}
              
              mc version enable {{ $minioAlias }}/{{ $bucket.name }};
              
              {{- else if eq $versioning "Suspended" }}
              
              mc version suspend {{ $minioAlias }}/{{ $bucket.name }};
              
              {{- else if ne $versioning "Unchanged" }}
              {{- fail (printf "Invalid value '%s' for versioning of bucket '%s'" $versioning $bucket.name) }}
              {{- end }}
              {{- end }}

              {{- if $bucket.tags }}
              {{- $target := printf "%s/%s" $minioAlias $bucket.name }}
              {{- $tags := list }}
              {{- range $name, $value := $bucket.tags }}
              {{- $tags = (printf "%s=%s" $name $value) | append $tags }}
              {{- end }}
              {{- $tags = join "&" $tags | quote }}
              
              mc tag set {{ $target }} {{ $tags }};
              
              {{- end }}

              {{- if $bucket.bucketReplication }}
              {{- if eq ($bucket.bucketReplication.enabled | toString) "true" }}

              get_ID=`mc replicate ls {{ $minioAlias }}/{{ $bucket.name }} | grep "Rule ID" | awk -F" " '{print $3}'`

              echo "Found ID $get_ID"

              if [ "$get_ID" != "" ]; then

                method=update

                id=" --id $get_ID"

              else

                method=add

                id=""

              fi

              mc replicate ${method} {{ $minioAlias }}/{{ $bucket.name }} ${id} \
                 --remote-bucket "https://${REPLICATION_USER_{{$bucket.name | replace "-" "_" | upper}}}:${REPLICATION_PASSWORD_{{$bucket.name | replace "-" "_" | upper}}}@{{ $bucket.bucketReplication.targetClusterUrl }}:{{ $bucket.bucketReplication.targetClusterPort | default "443"}}/{{ $bucket.bucketReplication.targetBucket }}" \
                 --replicate "{{ join "," $bucket.bucketReplication.replicationSettings }}"

              {{- end }}
              {{- end }}


              {{- end }}

              {{- if .Values.provisioning.extraCommands }}
              {{ join ";" .Values.provisioning.extraCommands | nindent 14 }};
              {{- end }}

              echo "End Minio provisioning";
          env:
            - name: MC_INSECURE
              value: {{ .Values.skip_tls_verification | default "false" | quote }}
            - name: MINIO_SCHEME
              value: {{ ternary "https" "http" .Values.tls.enabled | quote }}
            {{- if .Values.auth.useCredentialsFiles }}
            - name: MINIO_ROOT_USER_FILE
              value: "/opt/bitnami/minio/secrets/root-user"
            - name: MINIO_ROOT_PASSWORD_FILE
              value: "/opt/bitnami/minio/secrets/root-password"
            {{- else }}
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "minio.secretName" . }}
                  key: {{ include "minio.rootUserKey" . }}
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "minio.secretName" . }}
                  key: {{ include "minio.rootPasswordKey" . }}
            {{- end }}
            {{- range $bucket := .Values.provisioning.buckets }}
            {{- if $bucket.bucketReplication }}
            {{- if eq ($bucket.bucketReplication.enabled | toString) "true" }}
            - name: REPLICATION_USER_{{ $bucket.name | replace "-" "_" | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $bucket.bucketReplication.credSecretName }}
                  key: username
            - name: REPLICATION_PASSWORD_{{ $bucket.name | replace "-" "_" | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $bucket.bucketReplication.credSecretName }}
                  key: password
            {{- end }}
            {{- end }}
            {{- end }}
            {{- if .Values.tls.mountPath }}
            - name: MINIO_CERTS_DIR
              value: {{ .Values.tls.mountPath | quote }}
            {{- end }}
          {{- if .Values.provisioning.resources }}
          resources: {{- toYaml .Values.provisioning.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: empty-dir
              mountPath: /.mc
              subPath: app-mc-dir
            - name: empty-dir
              mountPath: /opt/bitnami/minio/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            {{- if .Values.provisioning.enabled }}
            - name: minio-provisioning
              mountPath: /etc/ilm
            {{- end }}
            {{- if .Values.auth.useCredentialsFiles }}
            - name: minio-credentials
              mountPath: /opt/bitnami/minio/secrets/
            {{- end }}
            {{- if .Values.tls.mountcerts }}
            - name: minio-certs
              mountPath: {{ default "/certs" .Values.tls.mountPath }}
            - name: minio-client-certs
              mountPath: /.mc/certs
            {{- end }}
            {{- range $idx, $_ := .Values.provisioning.usersExistingSecrets }}
            - name: {{ printf "users-secret-%d" $idx }}
              mountPath: /opt/bitnami/minio/users/{{ $idx }}/
            {{- end }}
      {{- if .Values.provisioning.tolerations }}
      tolerations:
      {{- range $key, $value := .Values.provisioning.tolerations }}
        - effect: {{ $value.effect }}
          key: {{ $value.key }}
          operator: {{ $value.operator }}
          value: {{ $value.value }}
      {{- end }}
      {{- end }}
      volumes:
        - name: empty-dir
          emptyDir: {}
        {{- if .Values.provisioning.enabled }}
        - name: minio-provisioning
          configMap:
            name: {{ .Values.name }}
        {{- end }}
        {{- if .Values.auth.useCredentialsFiles }}
        - name: minio-credentials
          secret:
            secretName: {{ .Values.auth.secretName }}
        {{- end }}
        {{- range $idx, $userSecret := .Values.provisioning.usersExistingSecrets }}
        - name: {{ printf "users-secret-%d" $idx }}
          secret:
            secretName: {{ $userSecret }}
        {{- end }}
        {{- if .Values.tls.mountcerts }}
        - name: minio-certs
          secret:
            secretName: {{ .Values.tls.secretName }}
            items:
            - key: tls.crt
              path: public.crt
            - key: tls.key
              path: private.key
            - key: ca.crt
              path: CAs/public.crt
        - name: minio-client-certs
          secret:
            secretName: {{ .Values.tls.secretName }}
            items:
              - key: ca.crt
                path: CAs/public.crt
        {{- end }}
{{- end }}